<?xml version="1.0" encoding="utf-8"?>

<resources>
    <!-- RECURSOS DE ATRIBUTOS DESCARGADOS DE INTERNET
    De la pagina material-components
    https://github.com/material-components/material-components-android/tree/
    master/lib/java/com/google/android/material/textfield/res/values/attrs.xml

    Se utilizan algunos pero la gran mayoria puede eliminarse-->


    <!-- Style to use for MaterialButtons in this theme. -->
    <attr name="materialButtonStyle" format="reference" />
    <!-- Style to use for Material Icon Only Buttons in this theme. -->
    <attr name="materialIconButtonStyle" format="reference" />
    <!-- Style to use for Filled Material Icon Only Buttons in this theme. -->
    <attr name="materialIconButtonFilledStyle" format="reference" />
    <!-- Style to use for Filled Tonal Material Icon Only Buttons in this theme. -->
    <attr name="materialIconButtonFilledTonalStyle" format="reference" />
    <!-- Style to use for Outlined Material Icon Only Buttons in this theme. -->
    <attr name="materialIconButtonOutlinedStyle" format="reference" />
    <!-- Style to use for Material Outlined Buttons in this theme. -->
    <attr name="materialButtonOutlinedStyle" format="reference" />
    <!-- Style to use for MaterialButtonToggleGroups in this theme. -->
    <attr name="materialButtonToggleGroupStyle" format="reference" />

    <declare-styleable name="MaterialButton">
        <!-- Whether the button can be checked. -->
        <attr name="android:checkable" />
        <attr name="android:insetLeft" />
        <attr name="android:insetRight" />
        <attr name="android:insetTop" />
        <attr name="android:insetBottom" />
        <!-- Background for the MaterialButton. If this is set to a drawable or color, MaterialButton
             will respect this background and not create its own MaterialShapeDrawable for the
             background. This means that the insets, shape appearance, and stroke will be ignored.
             If this attribute is not set or is @empty or @null, a MaterialShapeDrawable will be used
             for the background based on the insets, shape appearance, and stroke. -->
        <attr name="android:background" />
        <attr name="backgroundTint" />
        <attr name="backgroundTintMode" />
        <!-- Elevation for the MaterialButton. -->
        <attr name="elevation" />
        <!-- Icon drawable to display at the start of this view. -->
        <attr name="icon" format="reference" />
        <!-- Specifies the width and height to use for the icon drawable. -->
        <attr name="iconSize" format="dimension" />
        <!-- Padding between icon and button text. -->
        <attr name="iconPadding" format="dimension" />
        <!-- Specifies how the icon should be positioned on the X axis. -->
        <attr name="iconGravity">
            <!-- Push icon to the start of the button. -->
            <flag name="start" value="0x1" />
            <!-- Push the icon to the start of the text keeping a distance equal to
                 {@code iconPadding} from the text. -->
            <flag name="textStart" value="0x2" />
            <!-- Push icon to the end of the button. -->
            <flag name="end" value="0x3" />
            <!-- Push the icon to the end of the text keeping a distance equal to
                 {@code iconPadding} from the text. -->
            <flag name="textEnd" value="0x4" />
            <!-- Push the icon to the top of the button. -->
            <flag name="top" value="0x10" />
            <!-- Push the icon to the top of the text keeping a distance equal to
                 {@code iconPadding} from the text. -->
            <flag name="textTop" value="0x20" />
        </attr>
        <!-- Tint for icon drawable to display. -->
        <attr name="iconTint" format="color" />
        <!-- Tint mode for icon drawable to display. -->
        <attr name="iconTintMode" />
        <!-- Shape appearance style reference for MaterialButton. Attribute declaration is in the Shape
         package. -->
        <attr name="shapeAppearance" />
        <!-- Shape appearance overlay style reference for MaterialButton. To be used to augment
             attributes declared in the shapeAppearance. Attribute declaration is in the Shape package.
        -->
        <attr name="shapeAppearanceOverlay" />
        <!-- Specifies the color used to draw the path outline of the button. Attribute type definition
             is in resources package. -->
        <attr name="strokeColor" />
        <!-- Width of the stroke path of the button. Default is 0. Attribute type definition is in
             resources package. -->
        <attr name="strokeWidth" />
        <!--
            Specifies the radius for the corners of the button. Default is 0, for non-rounded corners.
        -->
        <attr name="cornerRadius" format="dimension" />
        <!-- Ripple color for the button. This may be a color state list, if the desired ripple color
             should be stateful. Attribute type definition is in resources package. -->
        <attr name="rippleColor" />
        <!-- Whether the button toggles the checked state when clicked. -->
        <attr name="toggleCheckedStateOnClick" format="boolean" />
    </declare-styleable>

    <declare-styleable name="MaterialButtonToggleGroup">
        <!-- Whether only a single button in this group is allowed to be checked at any time. By
             default, this is false and multiple buttons in this group are allowed to be checked at
             once. -->
        <attr name="singleSelection" />

        <!-- Whether we prevent all child buttons from being deselected.
             It's false by default. -->
        <attr name="selectionRequired" />
        <!-- The id of the child button that should be checked by default within this button group. -->
        <attr name="checkedButton" format="reference" />
        <!-- Whether this MaterialButtonToggleGroup and all its children are enabled -->
        <attr name="android:enabled" />
    </declare-styleable>

    <!-- TEXT VIEWS-->
    <!-- Style to use for TextInputLayout in the theme. -->
    <attr name="textInputStyle" format="reference" />

    <!-- Style to use for Outlined Textfield in this theme. -->
    <attr name="textInputOutlinedStyle" format="reference" />

    <!-- Style to use for Filled Textfield in this theme. -->
    <attr name="textInputFilledStyle" format="reference" />

    <!-- Style to use for Outlined Dense Textfield in this theme. -->
    <attr name="textInputOutlinedDenseStyle" format="reference" />

    <!-- Style to use for Filled Dense Textfield in this theme. -->
    <attr name="textInputFilledDenseStyle" format="reference" />

    <!-- Style to use for Outlined Textfield for Exposed Dropdown Menu in this theme. -->
    <attr name="textInputOutlinedExposedDropdownMenuStyle" format="reference" />

    <!-- Style to use for Filled Textfield for Exposed Dropdown Menu in this theme. -->
    <attr name="textInputFilledExposedDropdownMenuStyle" format="reference" />

    <declare-styleable name="TextInputLayout">
        <!-- Whether the layout is enabled -->
        <attr name="android:enabled" />
        <!-- The hint to display in the floating label. -->
        <attr name="android:hint" />
        <!-- The text color for the hint when the text field is not activated (such
             as for the resting and disabled states). -->
        <attr name="android:textColorHint" />
        <!-- Makes the text field be at least this many ems wide if its width is
             set to wrap_content. -->
        <attr name="android:minEms" />
        <!-- Makes the text field be at most this many ems wide if its width is set
             to wrap_content. -->
        <attr name="android:maxEms" />
        <!-- Makes the text field be at least this dimension wide in pixels if its width is
             set to wrap_content. -->
        <attr name="android:minWidth" />
        <!-- Makes the text field be at most this dimension wide in pixels if its width is set
             to wrap_content. -->
        <attr name="android:maxWidth" />

        <!-- Whether the layout's floating label functionality is enabled. -->
        <attr name="hintEnabled" format="boolean" />
        <!-- Whether to animate hint state changes. -->
        <attr name="hintAnimationEnabled" format="boolean" />
        <!-- TextAppearance of the hint in the collapsed floating label. -->
        <attr name="hintTextAppearance" format="reference" />
        <!-- Text color of the hint in the collapsed floating label.
             If set, this takes precedence over hintTextAppearance. -->
        <attr name="hintTextColor" format="color" />
        <!-- Whether the hint should occupy the input area when the text field is
             unpopulated and not focused. -->
        <attr name="expandedHintEnabled" format="boolean" />

        <!-- The text to display as helper text underneath the text input area. -->
        <attr name="helperText" format="string" />
        <!-- Whether the layout's helper text functionality is enabled. -->
        <attr name="helperTextEnabled" format="boolean" />
        <!-- TextAppearance of the helper text displayed underneath the text input area. -->
        <attr name="helperTextTextAppearance" format="reference" />
        <!-- Text color of the helper text displayed underneath the text input area.
             If set, this takes precedence over helperTextTextAppearance. -->
        <attr name="helperTextTextColor" format="color" />

        <!-- Whether the layout is laid out as if an error will be displayed. -->
        <attr name="errorEnabled" format="boolean" />
        <!-- TextAppearance of any error message displayed. -->
        <attr name="errorTextAppearance" format="reference" />
        <!-- Text color for any error message displayed.
             If set, this takes precedence over errorTextAppearance. -->
        <attr name="errorTextColor" format="color" />
        <!-- Text to set as the content description for the error view.
             Should be set when the error message has special characters that a
             screen reader is not able to announce properly. -->
        <attr name="errorContentDescription" format="string" />
        <!-- AccessibilityLiveRegion of any error message displayed. -->
        <attr name="errorAccessibilityLiveRegion" format="integer" />
        <!-- End icon to be shown when an error is displayed. -->
        <attr name="errorIconDrawable" format="reference" />
        <!-- Tint color to use for the error icon. -->
        <attr name="errorIconTint" format="reference" />
        <!-- Blending mode used to apply the error icon tint. -->
        <attr name="errorIconTintMode">
            <!-- The tint is drawn on top of the drawable.
                 [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc] -->
            <enum name="src_over" value="3" />
            <!-- The tint is masked by the alpha channel of the drawable. The drawable’s
                 color channels are thrown out. [Sa * Da, Sc * Da] -->
            <enum name="src_in" value="5" />
            <!-- The tint is drawn above the drawable, but with the drawable’s alpha
                 channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc] -->
            <enum name="src_atop" value="9" />
            <!-- Multiplies the color and alpha channels of the drawable with those of
                 the tint. [Sa * Da, Sc * Dc] -->
            <enum name="multiply" value="14" />
            <!-- [Sa + Da - Sa * Da, Sc + Dc - Sc * Dc] -->
            <enum name="screen" value="15" />
        </attr>

        <!-- Whether the layout is laid out as if the character counter will be displayed. -->
        <attr name="counterEnabled" format="boolean" />
        <!-- The max length to display in the character counter. -->
        <attr name="counterMaxLength" format="integer" />
        <!-- TextAppearance of the character counter. -->
        <attr name="counterTextAppearance" format="reference" />
        <!-- Text color of the character counter.
             If set, this takes precedence over counterTextAppearance. -->
        <attr name="counterTextColor" format="reference" />
        <!-- TextAppearance of the character counter when the text is longer than the max. -->
        <attr name="counterOverflowTextAppearance" format="reference" />
        <!-- Text color of the character counter when the text is longer than the max.
             If set, this takes precedence over counterOverflowTextAppearance. -->
        <attr name="counterOverflowTextColor" format="reference" />

        <!-- The text to display as placeholder text in the text input area. -->
        <attr name="placeholderText" format="string" />
        <!-- TextAppearance of the placeholder text displayed in the text input area. -->
        <attr name="placeholderTextAppearance" format="reference" />
        <!-- Text color of the placeholder text displayed in the text input area.
             If set, this takes precedence over placeholderTextAppearance. -->
        <attr name="placeholderTextColor" format="color" />

        <!-- The text to display as prefix text in the text input area. -->
        <attr name="prefixText" format="string" />
        <!-- TextAppearance of the prefix text displayed in the text input area. -->
        <attr name="prefixTextAppearance" format="reference" />
        <!-- Text color of the prefix text displayed in the text input area.
             If set, this takes precedence over prefixTextAppearance. -->
        <attr name="prefixTextColor" format="color" />
        <!-- The text to display as suffix text in the text input area. -->
        <attr name="suffixText" format="string" />
        <!-- TextAppearance of the suffix text displayed in the text input area. -->
        <attr name="suffixTextAppearance" format="reference" />
        <!-- Text color of the suffix text displayed in the text input area.
             If set, this takes precedence over suffixTextAppearance. -->
        <attr name="suffixTextColor" format="color" />

        <!-- Drawable to use for the start icon. -->
        <attr name="startIconDrawable" format="reference" />
        <!-- Text to set as the content description for the start icon. -->
        <attr name="startIconContentDescription" format="string" />
        <!-- Whether the start icon is checkable. -->
        <attr name="startIconCheckable" format="boolean" />
        <!-- Tint color to use for the start icon. -->
        <attr name="startIconTint" format="color" />
        <!-- Blending mode used to apply the background tint. -->
        <attr name="startIconTintMode">
            <!-- The tint is drawn on top of the drawable.
                 [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc] -->
            <enum name="src_over" value="3" />
            <!-- The tint is masked by the alpha channel of the drawable. The drawable’s
                 color channels are thrown out. [Sa * Da, Sc * Da] -->
            <enum name="src_in" value="5" />
            <!-- The tint is drawn above the drawable, but with the drawable’s alpha
                 channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc] -->
            <enum name="src_atop" value="9" />
            <!-- Multiplies the color and alpha channels of the drawable with those of
                 the tint. [Sa * Da, Sc * Dc] -->
            <enum name="multiply" value="14" />
            <!-- [Sa + Da - Sa * Da, Sc + Dc - Sc * Dc] -->
            <enum name="screen" value="15" />
        </attr>
        <!-- The minimum size of the start icon. -->
        <attr name="startIconMinSize" format="dimension" />
        <!-- The scale type of the start icon. -->
        <attr name="startIconScaleType">
            <!-- Scale the image using {@link android.graphics.Matrix.ScaleToFit#FILL}. -->
            <enum name="fitXY" value="0" />
            <!-- Scale the image using {@link android.graphics.Matrix.ScaleToFit#START}. -->
            <enum name="fitStart" value="1" />
            <!-- Scale the image using {@link android.graphics.Matrix.ScaleToFit#CENTER}. -->
            <enum name="fitCenter" value="2" />
            <!-- Scale the image using {@link android.graphics.Matrix.ScaleToFit#END}. -->
            <enum name="fitEnd" value="3" />
            <!-- Center the image in the view, but perform no scaling. -->
            <enum name="center" value="4" />
            <!-- Scale the image uniformly (maintain the image's aspect ratio) so both dimensions
                 (width and height) of the image will be equal to or larger than the corresponding
                 dimension of the view (minus padding). The image is then centered in the view. -->
            <enum name="centerCrop" value="5" />
            <!-- Scale the image uniformly (maintain the image's aspect ratio) so that both
                 dimensions (width and height) of the image will be equal to or less than the
                 corresponding dimension of the view (minus padding). The image is then centered in
                 the view. -->
            <enum name="centerInside" value="6" />
        </attr>
        <!-- The end icon mode of the TextInputLayout. It will display one of the end icons detailed
             below, or no end icon. -->
        <attr name="endIconMode">
            <!-- The view will display a custom icon specified by the user. -->
            <enum name="custom" value="-1" />
            <!-- No end icon. -->
            <enum name="none" value="0" />
            <!-- The view will display a toggle when the EditText has a password. -->
            <enum name="password_toggle" value="1" />
            <!-- The view will display a clear text button while the EditText contains input. -->
            <enum name="clear_text" value="2" />
            <!-- The view will display a toggle that displays/hides a dropdown menu. -->
            <enum name="dropdown_menu" value="3" />
        </attr>
        <!-- Drawable to use for the end icon. -->
        <attr name="endIconDrawable" format="reference" />
        <!-- Text to set as the content description for the end icon. -->
        <attr name="endIconContentDescription" format="string" />
        <!-- Whether the end icon is checkable. -->
        <attr name="endIconCheckable" format="boolean" />
        <!-- Tint color to use for the end icon. -->
        <attr name="endIconTint" format="color" />
        <!-- Blending mode used to apply the background tint. -->
        <attr name="endIconTintMode">
            <!-- The tint is drawn on top of the drawable.
                 [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc] -->
            <enum name="src_over" value="3" />
            <!-- The tint is masked by the alpha channel of the drawable. The drawable’s
                 color channels are thrown out. [Sa * Da, Sc * Da] -->
            <enum name="src_in" value="5" />
            <!-- The tint is drawn above the drawable, but with the drawable’s alpha
                 channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc] -->
            <enum name="src_atop" value="9" />
            <!-- Multiplies the color and alpha channels of the drawable with those of
                 the tint. [Sa * Da, Sc * Dc] -->
            <enum name="multiply" value="14" />
            <!-- [Sa + Da - Sa * Da, Sc + Dc - Sc * Dc] -->
            <enum name="screen" value="15" />
        </attr>
        <!-- The minimum size of the end icon -->
        <attr name="endIconMinSize" format="dimension" />
        <!-- The scale type of the end icon. -->
        <attr name="endIconScaleType">
            <!-- Scale the image using {@link android.graphics.Matrix.ScaleToFit#FILL}. -->
            <enum name="fitXY" value="0" />
            <!-- Scale the image using {@link android.graphics.Matrix.ScaleToFit#START}. -->
            <enum name="fitStart" value="1" />
            <!-- Scale the image using {@link android.graphics.Matrix.ScaleToFit#CENTER}. -->
            <enum name="fitCenter" value="2" />
            <!-- Scale the image using {@link android.graphics.Matrix.ScaleToFit#END}. -->
            <enum name="fitEnd" value="3" />
            <!-- Center the image in the view, but perform no scaling. -->
            <enum name="center" value="4" />
            <!-- Scale the image uniformly (maintain the image's aspect ratio) so both dimensions
                 (width and height) of the image will be equal to or larger than the corresponding
                 dimension of the view (minus padding). The image is then centered in the view. -->
            <enum name="centerCrop" value="5" />
            <!-- Scale the image uniformly (maintain the image's aspect ratio) so that both
                 dimensions (width and height) of the image will be equal to or less than the
                 corresponding dimension of the view (minus padding). The image is then centered in
                 the view. -->
            <enum name="centerInside" value="6" />
        </attr>

        <!-- Whether the text input area should be drawn as a filled box, an outline box, or not as a box.-->
        <attr name="boxBackgroundMode">
            <!-- Specifies that there should be no box set on the text input area. -->
            <enum name="none" value="0" />
            <!-- Filled box mode for the text input box. -->
            <enum name="filled" value="1" />
            <!-- Outline box mode for the text input box. -->
            <enum name="outline" value="2" />
        </attr>
        <!-- Value to use for the EditText's collapsed top padding in box mode. -->
        <attr name="boxCollapsedPaddingTop" format="dimension" />
        <!-- The value to use for the box's top start corner radius when in box mode. -->
        <attr name="boxCornerRadiusTopStart" format="dimension" />
        <!-- The value to use for the box's top end corner radius when in box mode. -->
        <attr name="boxCornerRadiusTopEnd" format="dimension" />
        <!-- The value to use for the box's bottom start corner radius when in box mode. -->
        <attr name="boxCornerRadiusBottomStart" format="dimension" />
        <!-- The value to use for the box's bottom end corner radius when in box mode. -->
        <attr name="boxCornerRadiusBottomEnd" format="dimension" />
        <!-- The color to use for the box's stroke when in outline box mode. -->
        <attr name="boxStrokeColor" format="color" />
        <!-- The color to use for the box's stroke in outline box mode when an error
             is being displayed. If not set, it defaults to errorTextColor if on
             error state, or to counterOverflowTextColor if on overflow state. -->
        <attr name="boxStrokeErrorColor" format="color" />
        <!-- The color to use for the box's background color when in filled box mode.
             If a non-stateful color resource is specified, default colors will be used for the hover
             and disabled states. -->
        <attr name="boxBackgroundColor" format="color" />
        <!-- The value to use for the box's stroke when in outline box mode, or for the underline stroke
             in filled mode. -->
        <attr name="boxStrokeWidth" format="dimension" />
        <!-- The value to use for the focused box's stroke when in outline box mode, or for the focused
             underline stroke in filled mode.. -->
        <attr name="boxStrokeWidthFocused" format="dimension" />

        <!-- Shape appearance style reference for TextInputLayout. Attribute declaration is in the Shape
            package. -->
        <attr name="shapeAppearance" />
        <!-- Shape appearance overlay style reference for TextInputLayout. To be used to augment
             attributes declared in the shapeAppearance. Attribute declaration is in the Shape
             package. -->
        <attr name="shapeAppearanceOverlay" />

        <!-- Whether the view will display a toggle when the EditText has a password.
             Deprecated. The view's end icon should be specified via endIconMode instead. -->
        <attr name="passwordToggleEnabled" format="boolean" />
        <!-- Drawable to use as the password input visibility toggle icon.
             Deprecated. Use endIconDrawable instead. -->
        <attr name="passwordToggleDrawable" format="reference" />
        <!-- Text to set as the content description for the password input visibility toggle.
             Deprecated. Use endIconContentDescription instead. -->
        <attr name="passwordToggleContentDescription" format="string" />
        <!-- Icon to use for the password input visibility toggle
             Deprecated. Use endIconTint instead. -->
        <attr name="passwordToggleTint" format="color" />
        <!-- Blending mode used to apply the background tint.
             Deprecated. Use endIconTintMode instead. -->
        <attr name="passwordToggleTintMode">
            <!-- The tint is drawn on top of the drawable.
                 [Sa + (1 - Sa)*Da, Rc = Sc + (1 - Sa)*Dc] -->
            <enum name="src_over" value="3" />
            <!-- The tint is masked by the alpha channel of the drawable. The drawable’s
                 color channels are thrown out. [Sa * Da, Sc * Da] -->
            <enum name="src_in" value="5" />
            <!-- The tint is drawn above the drawable, but with the drawable’s alpha
                 channel masking the result. [Da, Sc * Da + (1 - Sa) * Dc] -->
            <enum name="src_atop" value="9" />
            <!-- Multiplies the color and alpha channels of the drawable with those of
                 the tint. [Sa * Da, Sc * Dc] -->
            <enum name="multiply" value="14" />
            <!-- [Sa + Da - Sa * Da, Sc + Dc - Sc * Dc] -->
            <enum name="screen" value="15" />
        </attr>
    </declare-styleable>

    <declare-styleable name="TextInputEditText">
        <!-- Whether the TextInputEditText should use the TextInputLayout's focused
             rectangle instead of its own. -->
        <attr name="textInputLayoutFocusedRectEnabled" format="boolean" />
    </declare-styleable>

    <declare-styleable name="MaterialAutoCompleteTextView" parent="AppCompatAutoCompleteTextView">
        <attr name="android:inputType" />
        <attr name="android:popupElevation" />

        <!-- The default layout used to inflate auto-complete items -->
        <attr name="simpleItemLayout" format="reference" />
        <!-- The default auto-completion items in a string array -->
        <attr name="simpleItems" format="reference" />
        <!-- The color of the default selected item of the dropdown list. -->
        <attr name="simpleItemSelectedColor" format="color" />
        <!-- The ripple color of the default selected item of the dropdown list. -->
        <attr name="simpleItemSelectedRippleColor" format="color" />
    </declare-styleable>

    <!-- https://stackoverflow.com/questions/53143535/
    failed-to-find-attr-textappearancecaption-in-current-theme-->
    <style name="TextStyle" parent="@android:style/TextAppearance">
        <item name="android:textSize">20sp</item>
        <item name="android:textColor">#aacbb4</item>
        <item name="textAppearanceTitleLarge">@style/TextAppearance.Material3.TitleLarge</item>
        <item name="textAppearanceTitleMedium">@style/TextAppearance.Material3.TitleMedium</item>
        <item name="textAppearanceTitleSmall">@style/TextAppearance.Material3.TitleSmall</item>
        <item name="textAppearanceLabelLarge">@style/TextAppearance.Material3.LabelMedium</item>
        <item name="textAppearanceBodyMedium">@style/TextAppearance.Material3.BodyMedium</item>

    </style>

</resources>